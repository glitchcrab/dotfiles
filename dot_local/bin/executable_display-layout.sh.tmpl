#!/usr/bin/env bash

_STATUSFILE="/tmp/display_status.json"

if test -e $_STATUSFILE; then
    _status=`jq -r .running $_STATUSFILE`
    if [ $_status == 'true' ]; then
        exit 0
    else
        jq -n '{ "running": "true" }' | tee $_STATUSFILE > /dev/null
    fi
else
    touch $_STATUSFILE
    jq -n '{ "running": "true" }' | tee $_STATUSFILE > /dev/null
fi

_user="$(id -u -n)"
_uid="$(id -u)"

export XAUTHORITY=/home/$_user/.Xauthority
export DISPLAY=:0
export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$_uid/bus"
export LANG=en_GB.UTF-8

MONCOUNT="$(xrandr | grep -E '\sconnected' | wc -l)"

case "$MONCOUNT" in
    3)
        LAYOUT="two_mon"
        ;;
    2)
        LAYOUT="one_mon"
        ;;
    1)
        LAYOUT="no_mon"
        ;;
    *)
        echo "cannot calculate display count"
        exit 1
esac

manage_picom() {
    if [ $1 == "start" ] && [ -z `pgrep picom` ]; then
        echo "starting picom"
        systemctl start picom --user
    elif [ $1 == "stop" ] && [ ! -z `pgrep picom` ]; then
        systemctl stop picom --user
    fi
}

set_layout() {
{{- if eq .chezmoi.hostname "phoenix" }}
    primaryDisplay="eDP1"
{{- else if eq .chezmoi.hostname "cheyenne" }}
    primaryDisplay="eDP-1"
{{- end }}
    leftDisplaySerial="7MT0191D115L"
    rightDisplaySerial="7MT0191J0GEU"

    # array to hold args passed to xrandr command
    declare -a xrandrArgs

    # create a temporary file for xrandr state
    xrandrState=$(mktemp --suffix=_xrandr_state)

    # get xrandr output in JSON
    xrandr --properties | jc --xrandr > ${xrandrState}

    # always add the primary display to xrandr
    xrandrArgs+=("--output" "${primaryDisplay}" "--primary" "--mode" "1920x1200" "--pos" "0x0" "--rotate" "normal")

    externalDisplaysConnected=$(xrandr | awk '!/eDP-1/ && / connected / {print $1}' | wc -l)
    if [ $externalDisplaysConnected == "2" ]; then
        # get the left display output name based on display serial
        leftDisplayID="$(jq --arg id "${leftDisplaySerial}" -r '.screens[].devices[] | select(.props.EdidModel.serial_number==$id) | .device_name' ${xrandrState})"
        # get the right display output name based on display serial
        rightDisplayID="$(jq --arg id "${rightDisplaySerial}" -r '.screens[].devices[] | select(.props.EdidModel.serial_number==$id) | .device_name' ${xrandrState})"

        # add right display to args to the left of the primary display
        xrandrArgs+=("--output" "${rightDisplayID}" "--mode" "1920x1200" "--left-of" "${primaryDisplay}" "--rotate" "normal")

        # add left display to args to the left of the right display
        xrandrArgs+=("--output" "${leftDisplayID}" "--mode" "1920x1200" "--left-of" "${rightDisplayID}" "--rotate" "normal")
    fi

    # iterate over disconnected displays and add to the xrandr args
    for screen in $(jq -r '.screens[].devices[] | @base64' ${xrandrState}); do
        connected=$(echo ${screen} | base64 -d | jq -r .is_connected)
        identifier="$(echo ${screen} | base64 -d | jq -r .device_name)"
        if [ "${connected}" = false ] ; then
            xrandrArgs+=("--output" "${identifier}" "--off")
        fi
    done

    xrandr "${xrandrArgs[@]}"

    rm "${xrandrState}"
}

create_i3_conf() {
    # create new i3 config based on $LAYOUT
    _i3_pid=$(pgrep i3)
    _i3_socket="/run/user/$_uid/i3/ipc-socket.$_i3_pid"
    /home/$_user/.local/bin/i3_config_gen.py $LAYOUT $_user
    i3-msg -s ${_i3_socket} reload 2>&1
    i3-msg -s ${_i3_socket} restart 2>&1
}

reload_polybar() {
    # reload polybar to use all available outputs
    /home/$_user/.local/bin/polybar-launch.sh
}

reload_dunst() {
    ln -sf $HOME/.config/dunst/dunstrc-$LAYOUT $HOME/.config/dunst/dunstrc
    pkill dunst
}

set_wallpaper() {
    # set wallpaper based on number of active displays
    /home/$_user/.local/bin/set-wallpaper.sh
}

misc_config() {
    if [ $LAYOUT == "two_mon" ]; then
        brillo -S 100
        manage_picom start
    elif [ $LAYOUT == "one_mon" ]; then
        brillo -S 100
        manage_picom start
    elif [ $LAYOUT == "no_mon" ]; then
        brillo -S 25
        manage_picom stop
    else
        exit 1
    fi
    setxkbmap gb
    systemctl restart redshift-gtk --user
}

create_i3_conf
# only run layout config if arg "xrandr" is passed to script
if [ ! -z "${1}" ]; then
    if [ ${1} == "xrandr" ]; then
        set_layout
    fi
fi
reload_polybar
set_wallpaper
misc_config

function tidyup {
    # set the status back
    sleep 1
    jq -n '{ "running": "false" }' | tee $_STATUSFILE
}

trap tidyup EXIT

